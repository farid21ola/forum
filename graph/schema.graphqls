scalar Time

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type User {
  id: ID!
  username: String!
  posts: [Post!]!
  firstName: String!
  lastName: String!
  createdAt: Time!
  updateAt: Time!
}

type Post {
  id: ID!
  title: String!
  content: String!
  commentsEnabled: Boolean!
  comments(limit: Int = 10, offset: Int = 0): [Comment!]!
  user: User!
}

type Comment {
  id: ID!
  postId: ID!
  parentId: ID
  content: String!
  user: User!
  replies: [Comment!]!
}

input RegisterInput {
  username: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  username: String!
  password: String!
}

input NewPost {
  title: String!
  content: String!
}

input UpdatePost {
  postId: ID!
  enableComments: Boolean!
}

input NewComment {
  postId: ID!
  parentId: ID
  content: String!
}

type Query {
  posts(limit: Int = 10, offset: Int = 0): [Post!]!
  post(id: ID!): Post!
  users: [User!]!
  user(id: ID!): User!
}

type Mutation {
  login(input: LoginInput): AuthResponse!
  register(input: RegisterInput): AuthResponse!
  createPost(input: NewPost!): Post!
  updatePost(input: UpdatePost): Post!
  addComment(input: NewComment!): Comment!
}

type Subscription {
  commentAdded(postID: ID!): Comment!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}